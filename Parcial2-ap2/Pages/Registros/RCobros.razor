@page "/Cobros"
@page "/Cobros/{CobroId:int}"

@using Parcial2_ap2.BLL
@using Parcial2_ap2.Models
@using Blazored.Toast
@using Blazored.Toast.Services

@inject IToastService Toast


<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header ">
            <h1>Registro de Cobros</h1>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col form-group" align="left">
                    <label>Cobro Id</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Cobro.CobroId" class="form-control" />
                        <div class="input-group-prepend">
                            <button type="button" class="btn btn-primary" @onclick="Buscar">
                                <i class="oi oi-magnifying-glass mr-2" />Buscar
                            </button>
                        </div>
                    </div>
                </div>



                <div class="col form-group" align="right">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                </div>

            </div>

            <div class="form-group">
                <label>Cliente</label>
                <InputSelect @bind-Value="Cobro.ClienteId" class="form-control" @onclick="CobrosPendientes">
                    <option value="0" disabled selected>Seleccionar Cliente</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClienteId">@item.Nombre</option>}
                </InputSelect>
                <ValidationMessage For="(() => Cobro.ClienteId)" />
            </div>
            <div class="card-header ">
                <h3>Cobros Detalle</h3>
            </div>
            <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                <table class="table table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th>Id</th>
                            <th>Fecha</th>
                            <th>Monto</th>
                            <th>Balance</th>
                            <th>Cobrado</th>
                            <th>Pagar</th>
                        </tr>
                    </thead>
                    <tbody class="bg-primary">
                        @foreach (var item in Cobro.Detalle)
                        {
                            <tr>
                                <td>@item.VentaId</td>
                                <td>@item.Venta.Fecha</td>
                                <td>@item.Venta.Monto</td>
                                <td>@item.Venta.Balance</td>
                                <td>@item.Total</td>
                                <th><input type="checkbox" @onchange="@(() => Cobrar(item))" /></th>

                            </tr>
}
                    </tbody>
                </table>

            </div>
            <div class="form-group">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="form-group row m-1">
                            <label class="col-form-label">Totales:</label>
                            <div class="input-group col-sm-3">
                                <InputNumber @bind-Value="Cobro.Totales" readonly class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="col">
                        <div class="form-group row">
                            <label class="col-form-label">Total Cobrado</label>

                            <div class="col-sm-3">
                                <InputNumber @bind-Value="Cobro.TotalCobro" readonly class="form-control" />
                            </div>

                        </div>
                    </div>
                </div>
                <div class="border-info">
                    <h5>Observaciones</h5>
                    <InputTextArea @bind-Value="Cobro.Observaciones" class="form-control" />
                </div>
            </div>



            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>

                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                        <i class="oi oi-file mr-2" width="30" height="30" viewBox="0 0 20 20" />Nuevo
                    </button>

                    <button type="submit" class="btn btn-lg btn-success">
                        <i class="oi oi-account-login" style="transform:rotate(90deg)" width="30" height="30" viewBox="0 0 20 20" />Guardar
                    </button>

                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <i class="oi oi-trash mr-2" />Eliminar
                    </button>

                </div>
            </div>
        </div>
    </div>
</EditForm>


@code { [Parameter]
            public int CobroId { get; set; }
            Cobros Cobro = new Cobros();
            List<Clientes> ListaClientes = new List<Clientes>();

            protected override void OnInitialized()
            {
                Nuevo();

            }

            public void Nuevo()
            {
                Cobro = new Cobros();
                ListaClientes = ClienteBLL.GetList(e => true);

            }
            public void Eliminar()
            {
                bool Eliminado;

                Eliminado = CobrosBLL.Eliminar(Cobro.CobroId);

                if (Eliminado)
                {
                    Nuevo();
                    Toast.ShowSuccess("Orden eliminidad correctamente");

                }
                else
                    Toast.ShowError("no fue posible eliminar esta orden");

            }
            public void Buscar()
            {
                if (Cobro.CobroId > 0)
                {
                    var cobro = CobrosBLL.Buscar(CobroId);
                    if (cobro != null)
                    {
                        this.Cobro = cobro;
                    }
                    else
                    {
                        Toast.ShowError("cobro no encontrado");
                    }
                }
                else
                    Toast.ShowWarning("Debe de ingresar un id para buscar");


            }
            public void Guardar()
            {
                bool guardado;
                if (Cobro.CobroId == 0)
                {
                    Cobro.Detalle.RemoveAll(d => d.Total == 0);
                    guardado = CobrosBLL.Guardar(Cobro);

                    if (guardado)
                    {
                        Toast.ShowSuccess("Se Guardo correctamente");
                        Nuevo();
                    }
                    else
                        Toast.ShowError("No se pudo guardar correctamente");

                }
                else
                    Toast.ShowWarning("No se puede modificar el cobro");
            }

            private void Cobrar(CobrosDetalle cobrosDetalle)
            {
                if (cobrosDetalle.Total == 0)
                {
                    cobrosDetalle.Total = cobrosDetalle.Venta.Balance;
                    Cobro.TotalCobro += cobrosDetalle.Total;
                }
                else
                {
                    cobrosDetalle.Total = 0;
                    Cobro.TotalCobro -= cobrosDetalle.Venta.Balance;
                }
            }
            public void CobrosPendientes()
            {
                if (Cobro.ClienteId == 0)
                    return;

                Cobro.Detalle = VentasBLL.ObetenerVentasPendientes(Cobro.ClienteId);
            } }